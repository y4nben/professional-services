# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This workflow accesses GCP project resources authenticating using Workflow Identity Federation

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
  # This workflow can also be triggered regularly
  # schedule:
  #   - cron: "*/5 * * * *"

jobs:
  build:
    # Allow the job to fetch a GitHub ID token
    permissions:
      id-token: write
      contents: read

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Assign environment variables
        run: |
            cat terraform.tfvars.sample | tr -d ' \t"' >> $GITHUB_ENV

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v0.6.0'
        with:
          token_format: 'access_token'
          workload_identity_provider: "projects/${{ env.project_number }}/locations/global/workloadIdentityPools/${{ env.wi_pool_name }}/providers/wip-github"
          service_account: 'wi-sample-account@${{ env.project_id }}.iam.gserviceaccount.com'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v0'

      - id: 'store-token'
        name: 'Store Access Token'
        run: |
          SV_JSON="$(echo -n "${{ steps.auth.outputs.access_token }}" | gcloud secrets versions add access-token-secret --data-file=- --format json)"
          echo "SV_JSON<<EOF" >> $GITHUB_ENV
          echo "$SV_JSON" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - id: 'function'
        name: 'Call Cloud Function'
        run: |-
          gcloud functions call sample-function --region=${{ env.location }} --data "{ \"secret_resource\": \"${{ fromJson( env.SV_JSON ).name }}\" }"
