<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (C) 2020 Google Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.google.cloud.pso</groupId>
  <artifactId>dataflow-hashpipeline</artifactId>
  <version>1.0-SNAPSHOT</version>

  <inceptionYear>2020</inceptionYear>
  <organization>
    <name>Google Inc.</name>
    <url>https://cloud.google.com</url>
  </organization>

  <name>dataflow-hashpipeline</name>
  <url>http://github.com/GoogleCloudPlatform/professional-services</url>

  <properties>
    <!-- Project properties -->
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

    <!-- Dependency properties -->
    <beam.version>2.34.0</beam.version>
    <gson.version>2.7</gson.version>
    <hamcrest.version>2.1</hamcrest.version>
    <java.version>1.8</java.version>
    <j2v8.version>4.8.0</j2v8.version>
    <json-data-generator.version>1.5</json-data-generator.version>
    <junit.version>4.13.1</junit.version>
    <maven-checkstyle-plugin.version>3.0.0</maven-checkstyle-plugin.version>
    <maven-compiler-plugin.version>3.8.0</maven-compiler-plugin.version>
    <maven-dependency-plugin.version>3.1.1</maven-dependency-plugin.version>
    <maven-enforcer-plugin.version>3.0.0-M2</maven-enforcer-plugin.version>
    <maven-exec-plugin.version>1.6.0</maven-exec-plugin.version>
    <maven-extra-enforcer-rules.version>1.0-beta-9</maven-extra-enforcer-rules.version>
    <maven-javadoc-plugin.version>3.0.1</maven-javadoc-plugin.version>
    <maven-jar-plugin.version>3.1.0</maven-jar-plugin.version>
    <maven-license-plugin.version>3.0</maven-license-plugin.version>
    <maven-os-plugin.version>1.5.0.Final</maven-os-plugin.version>
    <maven-pmd-plugin.version>3.10.0</maven-pmd-plugin.version>
    <maven-project-info-reports-plugin.version>3.0.0</maven-project-info-reports-plugin.version>
    <maven-shade-plugin.version>3.1.1</maven-shade-plugin.version>
    <maven-site-plugin>3.7.1</maven-site-plugin>
    <maven-source-plugin.version>3.0.1</maven-source-plugin.version>
    <maven-surefire-plugin.version>2.22.0</maven-surefire-plugin.version>
    <maven-versions-plugin.version>2.5</maven-versions-plugin.version>
    <mockito-core.version>2.21.0</mockito-core.version>
    <slf4j.version>1.7.30</slf4j.version>
  </properties>

  <dependencies>
    <!-- Beam -->
    <dependency>
      <groupId>org.apache.beam</groupId>
      <artifactId>beam-sdks-java-core</artifactId>
      <version>${beam.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.beam</groupId>
      <artifactId>beam-sdks-java-io-google-cloud-platform</artifactId>
      <version>${beam.version}</version>
      <exclusions>
        <exclusion>
          <groupId>junit</groupId>
          <artifactId>junit</artifactId>
        </exclusion>
        <!-- As of beam 2.19 if this exclusion was not added causing issue java.lang.NoClassDefFoundError: io/opencensus/trace/Tracestate
        Refer https://issues.apache.org/jira/browse/BEAM-9304. Will be fixed in beam 2.20
        -->
        <exclusion>
          <groupId>com.google.cloud.bigtable</groupId>
          <artifactId>bigtable-client-core</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.apache.beam</groupId>
      <artifactId>beam-sdks-java-extensions-google-cloud-platform-core</artifactId>
      <version>${beam.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.beam</groupId>
      <artifactId>beam-runners-google-cloud-dataflow-java</artifactId>
      <version>${beam.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.beam</groupId>
      <artifactId>beam-runners-direct-java</artifactId>
      <version>${beam.version}</version>
    </dependency>
	<!-- Google Cloud SDKs -->
	<dependency>
	    <groupId>com.google.cloud</groupId>
	    <artifactId>google-cloud-dlp</artifactId>
	    <version>1.1.4</version>
	</dependency>
	<dependency>
	    <groupId>com.google.cloud</groupId>
	    <artifactId>google-cloud-secretmanager</artifactId>
	    <version>1.0.1</version>
	</dependency>
	<dependency>
	  <groupId>com.google.firebase</groupId>
	  <artifactId>firebase-admin</artifactId>
	  <version>6.14.0</version>
	</dependency>

    <dependency>
        <groupId>org.mapdb</groupId>
        <artifactId>mapdb</artifactId>
        <version>3.0.8</version>
    </dependency>
    <!-- Logging -->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <version>${slf4j.version}</version>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-simple</artifactId>
      <version>${slf4j.version}</version>
    </dependency>


    <!-- Test -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>${junit.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest-core</artifactId>
      <version>${hamcrest.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest-library</artifactId>
      <version>${hamcrest.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <version>${mockito-core.version}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <extensions>
      <!--
        The OS Plugin generates various useful platform-dependent project properties normalized
        from ${os.name} and ${os.arch}.

        https://github.com/trustin/os-maven-plugin
      -->
      <extension>
        <groupId>kr.motd.maven</groupId>
        <artifactId>os-maven-plugin</artifactId>
        <version>${maven-os-plugin.version}</version>
      </extension>
    </extensions>


    <pluginManagement>
      <plugins>

        <!--
          The Shade plugin provides the capability to package the artifact in an uber-jar, including
          its dependencies and to shade - i.e. rename - the packages of some of the dependencies.

          The below provides the default configuration for the shade plugin which will be used by
          this project and child modules of this project.

          https://maven.apache.org/plugins/maven-shade-plugin
        -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-shade-plugin</artifactId>
          <version>${maven-shade-plugin.version}</version>
          <executions>
            <execution>
              <id>bundle-and-repackage</id>
              <phase>package</phase>
              <goals>
                <goal>shade</goal>
              </goals>
              <configuration>
                <dependencyReducedPomLocation>
                  ${basedir}/target/dependency-reduced-pom.xml
                </dependencyReducedPomLocation>
                <shadeTestJar>true</shadeTestJar>
                <artifactSet>
                  <includes>
                    <include>*:*</include>
                  </includes>
                </artifactSet>
                <filters>
                  <filter>
                    <artifact>*:*</artifact>
                    <excludes>
                      <exclude>META-INF/*.SF</exclude>
                      <exclude>META-INF/*.DSA</exclude>
                      <exclude>META-INF/*.RSA</exclude>
                    </excludes>
                  </filter>
                </filters>
                <transformers>
                  <transformer
                    implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"/>
                </transformers>
              </configuration>
            </execution>
          </executions>
        </plugin>
      </plugins>
    </pluginManagement>

    <plugins>

      <!--
        *********************************************************************************

        Maven phase: compile

        The following plugins will be executed whenever the project compiles. Certain checks
        executed during this phase will block the build if issues are found.

        *********************************************************************************
      !-->

      <!--
        The Enforcer plugin provides goals to control certain environmental constraints such as
        Maven version, JDK version and OS family along with many more built-in rules and user
        created rules.

        https://maven.apache.org/enforcer/maven-enforcer-plugin
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <version>${maven-enforcer-plugin.version}</version>
        <executions>
          <execution>
            <id>enforce-java-and-maven-versions</id>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <rules>
                <enforceBytecodeVersion>
                  <maxJdkVersion>${java.version}</maxJdkVersion>
                  <excludes>
                    <!--
                      Supplied by the user JDK and compiled with matching
                      version. Is not shaded, so safe to ignore.
                    -->
                    <exclude>jdk.tools:jdk.tools</exclude>
                  </excludes>
                </enforceBytecodeVersion>
                <requireJavaVersion>
                  <version>[1.7,)</version>
                </requireJavaVersion>
                <requireMavenVersion>
                  <!-- Keep aligned with prerequisite section below. -->
                  <version>[3.2,)</version>
                </requireMavenVersion>
              </rules>
            </configuration>
          </execution>
          <execution>
            <id>enforce-banned-dependencies</id>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <rules>
                <bannedDependencies>
                  <excludes>
                    <exclude>com.google.guava:guava-jdk5</exclude>
                    <exclude>com.google.protobuf:protobuf-lite</exclude>
                  </excludes>
                </bannedDependencies>
              </rules>
              <fail>true</fail>
            </configuration>
          </execution>
        </executions>
        <dependencies>
          <dependency>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>extra-enforcer-rules</artifactId>
            <version>${maven-extra-enforcer-rules.version}</version>
          </dependency>
        </dependencies>
      </plugin>


      <!--
        The Compiler plugin is used to compile the sources of the project.

        https://maven.apache.org/plugins/maven-compiler-plugin
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>${maven-compiler-plugin.version}</version>
        <configuration>
          <encoding>${project.build.sourceEncoding}</encoding>
          <source>${java.version}</source>
          <target>${java.version}</target>
          <showWarnings>true</showWarnings>
          <showDeprecation>true</showDeprecation>
          <optimize>true</optimize>
        </configuration>
      </plugin>


      <!--
        The License plugin manages the license of the project and its dependencies (update file
        headers, download dependencies licenses, check third-party licenses, ...)

        https://www.mojohaus.org/license-maven-plugin/index.html
      -->
      <plugin>
        <groupId>com.mycila</groupId>
        <artifactId>license-maven-plugin</artifactId>
        <version>${maven-license-plugin.version}</version>
        <configuration>
          <header>${project.basedir}/src/license/license-header.txt</header>
          <properties>
            <owner>${project.organization.name}</owner>
          </properties>
          <mapping>
            <java>SLASHSTAR_STYLE</java>
          </mapping>
          <headerDefinitions>
            <headerDefinition>${project.basedir}/src/license/license-header-style.xml
            </headerDefinition>
          </headerDefinitions>
          <includes>
            <include>src/main/**/*</include>
            <include>src/test/**/*</include>
            <include>pom.xml</include>
          </includes>
        </configuration>
        <executions>
          <execution>
            <id>add-licenses</id>
            <phase>process-sources</phase>
            <goals>
              <goal>format</goal>
            </goals>
          </execution>
        </executions>
      </plugin>


      <!--
        The Versions Plugin is used to manage the versions of artifacts in a project's POM.

        http://www.mojohaus.org/versions-maven-plugin
      -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>versions-maven-plugin</artifactId>
        <version>${maven-versions-plugin.version}</version>
        <executions>
          <execution>
            <id>analyze-dependency-updates</id>
            <phase>compile</phase>
            <goals>
              <goal>display-dependency-updates</goal>
            </goals>
          </execution>
        </executions>
      </plugin>


      <!--
        *********************************************************************************

        Maven phase: test

        The following plugins will be executed whenever the project executes tests. Certain checks
        executed during this phase will block the build if issues are found.

        *********************************************************************************
      !-->


      <!--
        The Surefire Plugin is used during the test phase of the build lifecycle to execute
        the unit tests of an application. It generates reports in two different file formats
        Plain text files (.txt) XML files (.xml)

        https://maven.apache.org/surefire/maven-surefire-plugin
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>${maven-surefire-plugin.version}</version>
      </plugin>


      <!--
        *********************************************************************************

        Maven phase: package

        The following plugins will be executed whenever the project packages the code into a
        distributable format such as a jar.

        *********************************************************************************
      !-->

      <!--
        The Jar plugin provides the capability to build jars.

        https://maven.apache.org/plugins/maven-jar-plugin
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>${maven-jar-plugin.version}</version>
      </plugin>


      <!--
        The Source plugin creates a jar archive of the source files of the current project. The jar
        file is, by default, created in the project's target directory.

        https://maven.apache.org/plugins/maven-source-plugin
      -->
      <plugin>
        <artifactId>maven-source-plugin</artifactId>
        <version>${maven-source-plugin.version}</version>
        <executions>
          <execution>
            <id>attach-sources</id>
            <goals>
              <goal>jar</goal>
            </goals>
          </execution>
        </executions>
      </plugin>


      <!--
        The Shade plugin provides the capability to package the artifact in an uber-jar, including
        its dependencies and to shade - i.e. rename - the packages of some of the dependencies.

        This plugin will use the configuration defined in pluginManagement.

        https://maven.apache.org/plugins/maven-shade-plugin
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <version>${maven-shade-plugin.version}</version>
      </plugin>


      <!--
        The Javadoc plugin  uses the Javadoc tool to generate javadocs for the specified project.
        For more information about the standard Javadoc tool

        https://maven.apache.org/plugins/maven-javadoc-plugin
      -->
      <plugin>
        <!-- Set up Javadoc configuration for javadoc run via in the Maven
             build. This project only uses the plugin to create the individual
             javadoc attached artifacts used for IDEs. The combined javadoc for the
             website is built in the sdks/java/javadoc directory. Rather than
             duplicate a raft of configuration between the ant.xml there and
             here, we leave things simple here. -->
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <version>${maven-javadoc-plugin.version}</version>
        <configuration>
          <windowtitle>
            ${project.name}, version ${project.version} API
          </windowtitle>
          <doctitle>${project.name}, version ${project.version}</doctitle>
          <use>false</use>
          <quiet>true</quiet>
          <notimestamp>true</notimestamp>
        </configuration>
      </plugin>


      <!--
        *********************************************************************************

        Maven phase: verify

        The following plugins will be executed during the verification phase after tests have been
        run to ensure quality criteria is met.

        *********************************************************************************
      !-->

      <!--
        Analyzes the dependencies of the project and determines which are: used and declared;
        used and undeclared; unused and declared.

        https://maven.apache.org/plugins/maven-dependency-plugin/
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <version>${maven-dependency-plugin.version}</version>
        <configuration>
          <!-- Ignore runtime-only dependencies in analysis -->
          <ignoreNonCompile>true</ignoreNonCompile>
          <failOnWarning>false</failOnWarning>
          <ignoredDependencies>
            <ignoredDependency>org.apache.beam:beam-runners-google-cloud-dataflow-java
            </ignoredDependency>
            <ignoredDependency>org.apache.beam:beam-runners-direct-java</ignoredDependency>
            <ignoredDependency>org.slf4j:slf4j-simple</ignoredDependency>
          </ignoredDependencies>
        </configuration>
        <executions>
          <execution>
            <id>analyze-dependencies</id>
            <phase>verify</phase>
            <goals>
              <goal>analyze-only</goal>
            </goals>
          </execution>
        </executions>
      </plugin>


      <!--
        The Spotbugs plugin uses static analysis to look for bugs in Java code. This check is
        run at compile time and will block the build if potential bugs are found.

        http://spotbugs.readthedocs.io/en/stable
      -->
<!--       <plugin>
        <groupId>com.github.spotbugs</groupId>
        <artifactId>spotbugs-maven-plugin</artifactId>
        <version>${maven-spotbugs-plugin.version}</version>
        <configuration>
          <excludeFilterFile>
            ${project.build.directory}/classes/spotbugs-exclude.xml
          </excludeFilterFile>
          <effort>Max</effort>
          <threshold>Low</threshold>
          <xmlOutput>true</xmlOutput>
          Ensures spotbugs does not run against the instrumented code created by clover.
          <classFilesDirectory>${project.build.outputDirectory}</classFilesDirectory>
        </configuration>
        <executions>
          <execution>
            <id>analyze-bugs</id>
            <phase>verify</phase>
            <goals>
              <goal>check</goal>
            </goals>
          </execution>
        </executions>
      </plugin> -->


      <!--
        The PMD plugin is a source code analyzer. It finds common programming flaws like unused
        variables, empty catch blocks, unnecessary object creation, and so forth.

        https://pmd.github.io/
      !-->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-pmd-plugin</artifactId>
        <version>${maven-pmd-plugin.version}</version>
        <configuration>
          <failOnViolation>true</failOnViolation>
          <printFailingErrors>true</printFailingErrors>
        </configuration>
        <executions>
          <execution>
            <id>analyze-source-code</id>
            <phase>verify</phase>
            <goals>
              <goal>check</goal>
              <goal>cpd-check</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

    </plugins>
  </build>


  <!-- Report configurations for builds. -->
  <reporting>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-project-info-reports-plugin</artifactId>
        <version>${maven-project-info-reports-plugin.version}</version>
        <reportSets>
          <reportSet>
            <reports>
              <report>index</report>
              <report>licenses</report>
              <report>dependency-info</report>
            </reports>
          </reportSet>
        </reportSets>
      </plugin>
    </plugins>
  </reporting>

</project>
